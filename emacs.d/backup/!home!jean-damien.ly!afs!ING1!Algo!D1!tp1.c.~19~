#include <stdio.h>
#include <math.h>

unsigned int_width(int i)
{
    if (i == 0)
        return 1;
    unsigned res = 0;
    if (i < 0)
    {
        i = -i;
        res++;
    }
    while (i != 0)
    {
        i = i / 10;
        res++;
    }
    return res;
}

unsigned ints_width(const int* tab, unsigned count)
{
    unsigned max_pos = 0;
    int max = tab[0];
    if (max < 0)
        max = -max;
    unsigned res = 0;
    int a = 0;
    for (unsigned i = 1; i < count; ++i)
    {
        int current = tab[i];
       if (current < 0)
        {
            current = (-current);
            max = max / 10;
            a = 1;
        }
        if (current > max)
        {
            max = current;
            max_pos = i;
        }
        else if (a == 1)
        {
            a = 0;
            max = max * 10;
        }

    }
    res += int_width(tab[max_pos]);
    return res;
}

void print_int_array(FILE* out, const int* tab, unsigned count)
{
    int width = ints_width(tab, count);
    int col_width = int_width(count - 1);
    int col = col_width + 2;
    fprintf(out, "%*s[0]", col_width - 1, "");
    for (unsigned i = 0; i < count; i++)
    {
        fprintf(out, " %*s%d", width - int_width(tab[i]), "", tab[i]);
        col += width + 1;
        if ((col + width + 1 > 80) && (i + 1 < count))
        {
            int space = col_width - int_width(i) - 2;
            fprintf(out, "\n");
            if (space <= 0)
                fprintf(out, "[%d]", i + 1);
            else
                fprintf(out, "%*s[%d]", space, "", i + 1);
            col = col_width + 2;
        }
    }
    fprintf(out, "\n");
}

int main(void)
{
    
    FILE *out = fopen("a.txt", "w+");
    out = stdout;
    int a[] = {
        1, 2, 3, 4, 5, 6, 13, -35, 129, -4, 123, -4555, 1341, 2432, 111, 0, 1230
    };
    int b[] = {
        1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6,
        1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6,
        1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6,
        1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6,
        1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6,
        1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6
    };
    int c[] = {
        -223161, -655888618, -2, -1164
    };

    int d[] = {
        24, 3276, 263401464, 240, 29615408, -137986868, -28
    };
    int e[] = {
        -4065538, 27111795, 216, -2461526, -548395, 1982542, 28462, 188201, -19, -320708714, 4547, -829946, 2, -1728114442, -64632, -6328, -485, 7559, 1167, 3
    };
    puts("-- a[]");
    print_int_array(out, a, sizeof(a)/sizeof(*a));
    puts("\n-- b[]");
    print_int_array(out, b, sizeof(b)/sizeof(*b));
    puts("\n-- b[] after b[8] = 123456");
    b[8] = 123456;
    print_int_array(out, b, sizeof(b)/sizeof(*b));
    puts("\n-- a[0..9]");
    print_int_array(out, a, 10);
    puts("\n-- a[0..10]");
    print_int_array(out, a, 11);
    puts("\naaa");
    print_int_array(out, c, 4);
    puts("should be");
    puts("[0]    -223161 -655888618         -2      -1164");
    puts("\n");
    printf("width is %d should be %d\n", ints_width(d, 7), int_width(-137986868));
    print_int_array(out, d, 7);
    puts("shoul' be");
    puts("[0]         24       3276  263401464        240   29615408 -137986868        -28");
    printf("width is %d should be %d\n", ints_width(e, 19), int_width(-1728114442));
    print_int_array(out, e, 19);
    puts("shoul' be");
    puts("[0]           2 -1728114442      -64632       -6328        -485        7559");
}