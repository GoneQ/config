#include "myfind.h"

static int d = 0;
static int follow_symlink = 0;

void check_symlink_and_dir(struct dirent *de, char *cur, int d)
{
    if ((check_type(de->d_type, 4) == 1))
    {
        if ((follow_symlink == 1) && (check_type(de->d_type, 2) == 1))
        {
            char new[my_strlen(cur) + my_strlen(de->d_name) - 1];
            my_strcat(new, cur, de->d_name);
            simple_current_find(new, d);
        }
    }
    else if (check_type(de->d_type, 2) == 1)
    {
        char new[my_strlen(cur) + my_strlen(de->d_name) - 1];
        my_strcat(new, cur, de->d_name);
        simple_current_find(new, d);
    }
}

static int simple_find_d(int argc, char *argv[], int options)
{
    int ret = 0;
    if (options == argc - 1)
    {
        ret = simple_current_find(".", 1);
        printf(".\n");
        return ret;
    }
    for (int i = 1; i < argc; i++)
    {
        int new;
        if (argv[i][0] != '-')
        {
            printf("%s\n", argv[i]);
            new = simple_current_find(argv[i], 1);
        }
        else if (argv[i][1] == '\0')
        {
            printf("%s\n", argv[i]);
            new = simple_current_find(argv[i], 1);
        }
        if (new == 1)
            ret = 1;
    }
    return ret;
}

int check_arguments(int argc, char *argv[])
{
    int count = 0;
    for (int i = 1; i < argc; i++)
    {
        if (argv[i][0] == '-')
        {
            char o = argv[i][1];
            char p = 0;
            if (o != '\0')
                p = argv[i][2];
            if ((o == 'd') && (p == '\0'))
                d = 1;
            else if ((o == 'H') && (p == '\0'))
                follow_symlink = -1;
            else if ((o == 'L') && (p == '\0'))
                follow_symlink = 1;
            else if ((o == 'P') && (p == '\0'))
                follow_symlink = 0;
            else if (o != '\0')
            {
                warnx("unknown predicate '%s'", argv[i]);
                return 1;
            }
            if (o != '\0')
                count++;
        }
    }
    if (d == 1)
        return simple_find_d(argc, argv, count);
    else
        return simple_find(argc, argv, count, follow_symlink);
}
